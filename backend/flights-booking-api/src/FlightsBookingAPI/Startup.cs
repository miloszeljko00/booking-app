/*
 * FlightBookingAPI
 *
 * API aplikacije za kupovinu avionskih karata
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.IO;
using System.Reflection;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;
using FlightsBookingAPI.Filters;
using FlightsBookingAPI.OpenApi;
using FlightsBookingAPI.Formatters;
using FlightsBooking.Services;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Http;
using System.Collections.Generic;
using Microsoft.Extensions.Options;
using Grpc.Core;
using Rs.Ac.Uns.Ftn.Grpc;
using Notification.Application.Notification.Support.Grpc;
using FlightsBooking.Grpc;
using Microsoft.AspNetCore.Server.Kestrel.Core;

namespace FlightsBookingAPI
{
    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="configuration"></param>
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        /// <summary>
        /// The application configuration.
        /// </summary>
        public IConfiguration Configuration { get; }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {
            // Add framework services.
            services
                // Don't need the full MVC stack for an API, see https://andrewlock.net/comparing-startup-between-the-asp-net-core-3-templates/
                .AddControllers(options => {
                    options.InputFormatters.Insert(0, new InputFormatterStream());
                })
                .AddJsonOptions(options =>
                {
                        options.JsonSerializerOptions.PropertyNamingPolicy = null;
                })
                .AddNewtonsoftJson(opts =>
                {
                    opts.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();
                    opts.SerializerSettings.Converters.Add(new StringEnumConverter
                    {
                        NamingStrategy = new CamelCaseNamingStrategy()
                    });
                });

            services
                .AddSwaggerGen(c =>
                {
                    c.EnableAnnotations(enableAnnotationsForInheritance: true, enableAnnotationsForPolymorphism: true);
                    
                    c.SwaggerDoc("1.0", new OpenApiInfo
                    {
                        Title = "FlightBookingAPI",
                        Description = "FlightBookingAPI (ASP.NET Core 6.0)",
                        TermsOfService = new Uri("https://github.com/openapitools/openapi-generator"),
                        Contact = new OpenApiContact
                        {
                            Name = "OpenAPI-Generator Contributors",
                            Url = new Uri("https://github.com/openapitools/openapi-generator"),
                            Email = ""
                        },
                        License = new OpenApiLicense
                        {
                            Name = "NoLicense",
                            Url = new Uri("http://localhost")
                        },
                        Version = "1.0",
                    });
                    c.CustomSchemaIds(type => type.FriendlyId(true));
                    c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{Assembly.GetEntryAssembly().GetName().Name}.xml");

                    // Include DataAnnotation attributes on Controller Action parameters as OpenAPI validation rules (e.g required, pattern, ..)
                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                    c.OperationFilter<GeneratePathParamsValidationFilter>();

                    // KeyCloak
                    c.CustomSchemaIds(type => type.ToString());
                    var securityScheme = new OpenApiSecurityScheme
                    {
                        Name = "KEYCLOAK",
                        Type = SecuritySchemeType.OAuth2,
                        In = ParameterLocation.Header,
                        BearerFormat = "JWT",
                        Scheme = "bearer",
                        Flows = new OpenApiOAuthFlows
                        {
                            AuthorizationCode = new OpenApiOAuthFlow
                            {
                                AuthorizationUrl = new Uri(Configuration["Jwt:AuthorizationUrl"]),
                                TokenUrl = new Uri(Configuration["Jwt:TokenUrl"]),
                                Scopes = new Dictionary<string, string> { }
                            }
                        },
                        Reference = new OpenApiReference
                        {
                            Id = JwtBearerDefaults.AuthenticationScheme,
                            Type = ReferenceType.SecurityScheme
                        }
                    };
                    c.AddSecurityDefinition(securityScheme.Reference.Id, securityScheme);
                    c.AddSecurityRequirement(new OpenApiSecurityRequirement{
                                                {securityScheme, new string[] { }}
                                            });

                });
            services
                    .AddSwaggerGenNewtonsoftSupport();


            Console.WriteLine(Configuration["Jwt:Authority"]);

            //Keycloak
            services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;

            }).AddJwtBearer(o =>
            {
                o.Authority = Configuration["Jwt:Authority"];
                o.Audience = Configuration["Jwt:Audience"];
                o.RequireHttpsMetadata = false;
                o.Events = new JwtBearerEvents()
                {
                    OnAuthenticationFailed = c =>
                    {
                        c.NoResult();

                        c.Response.StatusCode = 500;
                        c.Response.ContentType = "text/plain";

                        if (true)
                        {
                            return c.Response.WriteAsync(c.Exception.ToString());
                        }

                        return c.Response.WriteAsync("An error occured processing your authentication.");
                    }
                };
            });
            services.AddGrpc();

            //Cross-Origin 
            services
                .AddCors(options =>
                {
                    options.AddPolicy("AllowOrigin",
                        builder => builder.WithOrigins("*")
                                          .AllowAnyHeader()
                                          .AllowAnyMethod());
                });

            services.AddScoped<IFlightService, FlightService>();
            services.AddScoped<IUserService, UserService>();
            IServiceProvider serviceProvider = services.BuildServiceProvider();
            var environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
            if (environment != null && environment == "Cloud")
            {
                Server server = new Server
                {
                    Services = {
                        SuggestFlightsGrpcService.BindService(new SuggestFlightsServerGrpcServiceImpl(serviceProvider.GetService<IFlightService>())),
                        BookFlightGrpcService.BindService(new BookFlightServerGrpcServiceImpl(serviceProvider.GetService<IFlightService>()))
                    },
                    Ports = { new ServerPort("0.0.0.0", Configuration.GetValue<int>("GrpcDruzina:Letici:Port"), ServerCredentials.Insecure) }

                };
                server.Start();
            }
            else
            {
                Server server = new Server
                {
                    Services = {
                    SuggestFlightsGrpcService.BindService(new SuggestFlightsServerGrpcServiceImpl(serviceProvider.GetService<IFlightService>())),
                    BookFlightGrpcService.BindService(new BookFlightServerGrpcServiceImpl(serviceProvider.GetService<IFlightService>()))
                },
                    Ports = { new ServerPort(Configuration.GetValue<string>("GrpcDruzina:Letici:Address"), Configuration.GetValue<int>("GrpcDruzina:Letici:Port"), ServerCredentials.Insecure) }
                };
                server.Start();
            }
            
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        /// </summary>
        /// <param name="app"></param>
        /// <param name="env"></param>
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
       
            app.UseDefaultFiles();
            app.UseStaticFiles();
            app.UseSwagger(c =>
                {
                    c.RouteTemplate = "openapi/{documentName}/openapi.json";
                })
                .UseSwaggerUI(c =>
                {
                    // set route prefix to openapi, e.g. http://localhost:8080/openapi/index.html
                    c.RoutePrefix = "openapi";
                    //TODO: Either use the SwaggerGen generated OpenAPI contract (generated from C# classes)
                    c.SwaggerEndpoint("/openapi/1.0/openapi.json", "FlightBookingAPI");
                    c.OAuthClientId(Configuration["Jwt:ClientId"]);
                    c.OAuthClientSecret(Configuration["Jwt:ClientSecret"]);
                    c.OAuthRealm(Configuration["Jwt:Realm"]);
                    c.OAuthAppName("KEYCLOAK");
                    //TODO: Or alternatively use the original OpenAPI contract that's included in the static files
                    // c.SwaggerEndpoint("/openapi-original.json", "FlightBookingAPI Original");
                });
            app.UseCors("AllowOrigin");
            app.UseRouting();
            app.UseGrpcWeb(new GrpcWebOptions { DefaultEnabled = true });
            app.UseAuthentication();
            app.UseAuthorization();
            app.UseEndpoints(endpoints =>
                {
                    endpoints.MapGrpcService<SuggestFlightsServerGrpcServiceImpl>();
                    endpoints.MapGrpcService<BookFlightServerGrpcServiceImpl>();
                    endpoints.MapControllers();
                });
        }
    }
}
